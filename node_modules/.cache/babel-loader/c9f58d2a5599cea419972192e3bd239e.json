{"ast":null,"code":"var _jsxFileName = \"/Users/yoohyunsun/pixori-prototype/src/App.js\";\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { Button } from '@material-ui/core';\nimport './styles/index.css';\nimport './styles/playhead.css';\nimport BeatMachine from './Components/BeatMachine';\nimport InstrumentRow from './Components/InstrumentRow';\nimport Bpm from './helpers/useBPM';\nimport BeatLabel from './Components/BeatLabel';\nimport CreateNft from './Components/CreateNft.jsx';\nimport Tempo from './Components/Tempo';\nimport { instruments, getBassNote } from './helpers/instruments';\nimport PlayButton from './Components/PlayButton';\nimport StopButton from './Components/StopButton';\nimport Volume from './Components/Volume';\nimport { Howl } from 'howler';\nimport Editor from \"./Editor\";\nimport useStyles from './App.styles';\nimport Colorbutton from \"./colorbutton\";\nimport { Fragment } from 'react';\nimport ColorPicker from './Components/ColorPicker.js';\nconst arr1 = Array.from(Array(16), () => new Array(32).fill(0));\nconst offCell = {\n  on: false,\n  color: '#000000'\n};\nconst initialCells = Array.from({\n  length: 40\n}, () => offCell);\n\nconst App = () => {\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\n  const [cells, setCells] = useState(initialCells);\n  const [selectedColor, setColor] = useState(\"000000\");\n  const classes = useStyles();\n  const colorSwatch = useMemo(() => [...new Set(cells.filter(cell => cell.on).map(cell => cell.color))], [cells]);\n  const chatString = useMemo(() => cells.map(cell => cell.color.slice(1)).join(','), [cells]);\n\n  function changeColor(color) {\n    setColor(color.hex);\n  } //beat machine initial states\n\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [tempo, setTempo] = useState(120);\n  const [volNum, setVolNum] = useState(50); // state tracking for playhead when isPlaying\n\n  const [squares, setSquares] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // state tracking for our dumb component when !isPlaying\n\n  const [playHeadArray, setPlayHeadArray] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const [counter, setCounter] = useState(0); // holds on off state for each row of instruments\n\n  const [grid, setGrid] = useState([instruments[0].pattern, instruments[1].pattern, instruments[2].pattern, instruments[3].pattern, instruments[4].pattern, instruments[5].pattern, instruments[6].pattern, instruments[7].pattern, instruments[8].pattern, instruments[9].pattern, instruments[10].pattern, instruments[11].pattern, instruments[12].pattern, instruments[13].pattern, instruments[14].pattern, instruments[15].pattern]); // TODO: Refactor player controls into helpers\n\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  }; //set BPM\n\n\n  let beats = Bpm(tempo); //ParseInt() as tempo field currently a string\n\n  const handleTempoChange = event => {\n    const eventValue = event.target.value;\n    setTempo(parseInt(eventValue));\n  }; //volume handler\n\n\n  const handleVol = (event, volNum) => {\n    setVolNum(volNum);\n  }; //Animation Specific functions\n  //helper function for playHeadLoop()\n\n\n  const getPreviousSquare = () => {\n    if (counter === 0) {\n      return document.getElementById('31');\n    } else {\n      return document.getElementById(`${counter - 1}`);\n    }\n  }; // animates playhead based off the counter position\n\n\n  const playHeadLoop = () => {\n    //get the square to animate\n    let squareToAnimate = document.getElementById(`${counter}`); //find previousSquare\n\n    let previousSquare = getPreviousSquare(); //TODO Re-factor into one toggle\n\n    previousSquare.classList.remove('playhead');\n    previousSquare.classList.add('inactive');\n    squareToAnimate.classList.remove('inactive');\n    squareToAnimate.classList.add('playhead');\n  }; //when player is stopped reset playhead and array to initial values\n\n\n  const resetSquares = () => {\n    setCounter(0);\n    setPlayHeadArray(squares.map((square, i) => /*#__PURE__*/React.createElement(\"td\", {\n      key: i + squares,\n      id: i,\n      className: square > 0 ? 'playhead' : 'inactive cycle',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    })));\n  }; //handles any changes user makes to instrument grid and updates values accordingly\n\n\n  const updateGrid = (row, column, toggle, color) => {\n    const clonedObj = { ...grid[row]\n    };\n    clonedObj[column] = toggle; //temporary const for setGrid\n\n    const arrayToPassSetGrid = [];\n\n    for (let i = 0; i < 16; i++) {\n      if (row === i) {\n        arrayToPassSetGrid.push(clonedObj);\n      } else {\n        arrayToPassSetGrid.push(grid[i]);\n      }\n    }\n\n    arr1[row].splice(column, 1, color);\n    setGrid(arrayToPassSetGrid);\n  }; //play an individual sound from our array from PlaySounds()\n\n\n  const playSound = source => {\n    var sound = new Howl({\n      src: [source],\n      html5: true,\n      volume: volNum / 100\n    });\n    sound.play();\n  }; //Iterate through the array of collected sounds compiled from our grid in loop()\n\n\n  const playSounds = array => {\n    for (let i = 0; i < array.length; i++) {\n      playSound(array[i]);\n    }\n  }; //collate all active sound samples on the current beat into an array from instruments\n\n\n  const loop = () => {\n    //create an array to hold our sounds for a beat\n    let soundArr = []; //loop through each instrument in our column\n\n    for (let j = 0; j < 16; j++) {\n      //if the square is active e.g. 0,0\n      if (grid[j][counter]) {\n        //set a temporary variable to hold our soundSrc\n        let soundSrc = instruments[j].name === 'Bassline' //e.g. \"./BassSamples/D-BassNote.wav\"\n        ? getBassNote(counter) : instruments[j].sound; //e.g. \"./DrumSamples/ClosedHats/HiHat01.wav\"\n\n        soundArr.push(soundSrc);\n      }\n\n      playSounds(soundArr);\n    }\n  }; //useEffect re-renders and runs our beat machine functions if IsPlaying per tick of setInterval\n\n\n  useEffect(() => {\n    //is the beat machine playing?\n    if (isPlaying) {\n      //set an interval to perform player logic\n      const interval = setInterval(() => {\n        //animate the playHead based on counter position\n        playHeadLoop(); // create an array of up to 6 sounds that are then played at the same time\n\n        loop(); // increments counter based on current tempo\n\n        if (counter < 31) {\n          setCounter(prevState => ++prevState);\n        } else {\n          setCounter(0);\n        }\n      }, beats);\n      return () => clearInterval(interval);\n    }\n\n    resetSquares();\n  }, [isPlaying, beats, volNum, counter]); //Map each instrumentRow onto the beat machine\n\n  const instrumentRows = instruments.map((instrument, row) => {\n    return /*#__PURE__*/React.createElement(InstrumentRow, {\n      key: row,\n      row: row,\n      updateGrid: (row, column, toggle, color) => updateGrid(row, column, toggle, color),\n      instrumentName: instrument.name,\n      instrumentSound: instrument.sound,\n      pattern: instrument.pattern,\n      instrumentColor: selectedColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }\n    });\n  }); //Conditionally Render Playhead if isPlaying\n\n  const playHead = () => {\n    if (isPlaying) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"instrument\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }\n      }), playHeadArray);\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n        className: isPlaying ? 'hidden' : 'instrument',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"inactive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }));\n    }\n  };\n\n  const handleClick = () => {\n    console.log(arr1);\n    alert('Creating NFT!');\n  }; //store playHeadComponent in a variable for readability\n\n\n  const playHeadComponent = playHead(); //App returns the composite of our beat machine and components\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"titleImg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BeatMachine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btnGroup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PlayButton, {\n    onClick: togglePlay,\n    isPlaying: isPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StopButton, {\n    onClick: togglePlay,\n    isPlaying: isPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"volTempo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"volStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Volume, {\n    volNum: volNum,\n    onChange: handleVol,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tempoStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tempo, {\n    value: tempo,\n    onTempoChange: event => {\n      handleTempoChange(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }\n  }, hideDrawingPanel, /*#__PURE__*/React.createElement(ColorPicker, {\n    color: selectedColor,\n    onChangeComplete: changeColor,\n    onSetColor: setColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.colorSwatchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }\n  }, colorSwatch.map(color => /*#__PURE__*/React.createElement(\"div\", {\n    key: color,\n    onClick: () => setColor(color),\n    className: classes.colorSwatch,\n    style: {\n      background: color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 11\n    }\n  }))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    border: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }\n  }, playHeadComponent, instrumentRows)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      background: \"ffffff\",\n      padding: '27px'\n    },\n    onClick: () => {\n      handleClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 5\n    }\n  }, \"Create\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/yoohyunsun/pixori-prototype/src/App.js"],"names":["React","useEffect","useState","useMemo","Button","BeatMachine","InstrumentRow","Bpm","BeatLabel","CreateNft","Tempo","instruments","getBassNote","PlayButton","StopButton","Volume","Howl","Editor","useStyles","Colorbutton","Fragment","ColorPicker","arr1","Array","from","fill","offCell","on","color","initialCells","length","App","hideDrawingPanel","setHideDrawingPanel","cells","setCells","selectedColor","setColor","classes","colorSwatch","Set","filter","cell","map","chatString","slice","join","changeColor","hex","isPlaying","setIsPlaying","tempo","setTempo","volNum","setVolNum","squares","setSquares","playHeadArray","setPlayHeadArray","counter","setCounter","grid","setGrid","pattern","togglePlay","beats","handleTempoChange","event","eventValue","target","value","parseInt","handleVol","getPreviousSquare","document","getElementById","playHeadLoop","squareToAnimate","previousSquare","classList","remove","add","resetSquares","square","i","updateGrid","row","column","toggle","clonedObj","arrayToPassSetGrid","push","splice","playSound","source","sound","src","html5","volume","play","playSounds","array","loop","soundArr","j","soundSrc","name","interval","setInterval","prevState","clearInterval","instrumentRows","instrument","playHead","handleClick","console","log","alert","playHeadComponent","colorSwatchContainer","background","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState ,useMemo} from 'react';\nimport { Button } from '@material-ui/core';\n\nimport './styles/index.css';\nimport './styles/playhead.css';\nimport BeatMachine from './Components/BeatMachine';\nimport InstrumentRow from './Components/InstrumentRow';\nimport Bpm from './helpers/useBPM';\nimport BeatLabel from './Components/BeatLabel';\nimport CreateNft from './Components/CreateNft.jsx';\nimport Tempo from './Components/Tempo';\nimport { instruments, getBassNote } from './helpers/instruments';\nimport PlayButton from './Components/PlayButton';\nimport StopButton from './Components/StopButton';\n\nimport Volume from './Components/Volume';\nimport { Howl } from 'howler';\nimport Editor from \"./Editor\";\nimport useStyles from './App.styles';\nimport Colorbutton from \"./colorbutton\";\nimport { Fragment } from 'react';\n\nimport ColorPicker from './Components/ColorPicker.js';\n\nconst arr1= Array.from(Array(16), () => new Array(32).fill(0));\nconst offCell = {\n  on: false,\n  color: '#000000',\n};\nconst initialCells = Array.from({ length: 40 }, () => offCell);\n\nconst App = () => {\n\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\n\n\n  const [cells, setCells] = useState(initialCells);\n  const [selectedColor, setColor] = useState(\"000000\");\n\n  const classes = useStyles();\n  const colorSwatch = useMemo(\n    () => [\n      ...new Set(cells.filter((cell) => cell.on).map((cell) => cell.color)),\n    ],\n    [cells]\n  );\n\n  const chatString = useMemo(\n    () => cells.map((cell) => cell.color.slice(1)).join(','),\n    [cells]\n  );\n\n\n  function changeColor(color) {\n    setColor(color.hex);\n  }\n  //beat machine initial states\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [tempo, setTempo] = useState(120);\n  const [volNum, setVolNum] = useState(50);\n  // state tracking for playhead when isPlaying\n  const [squares, setSquares] = useState([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]);\n  // state tracking for our dumb component when !isPlaying\n  const [playHeadArray, setPlayHeadArray] = useState([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]);\n  const [counter, setCounter] = useState(0);\n  // holds on off state for each row of instruments\n  const [grid, setGrid] = useState([\n    instruments[0].pattern,\n    instruments[1].pattern,\n    instruments[2].pattern,\n    instruments[3].pattern,\n    instruments[4].pattern,\n    instruments[5].pattern,\n    instruments[6].pattern,\n    instruments[7].pattern,\n    instruments[8].pattern,\n    instruments[9].pattern,\n    instruments[10].pattern,\n    instruments[11].pattern,\n    instruments[12].pattern,\n    instruments[13].pattern,    \n    instruments[14].pattern,\n    instruments[15].pattern,\n  ]);\n\n  // TODO: Refactor player controls into helpers\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  //set BPM\n  let beats = Bpm(tempo);\n\n  //ParseInt() as tempo field currently a string\n  const handleTempoChange = (event) => {\n    const eventValue = event.target.value;\n    setTempo(parseInt(eventValue));\n  };\n\n  //volume handler\n  const handleVol = (event, volNum) => {\n    setVolNum(volNum);\n  };\n\n  //Animation Specific functions\n  //helper function for playHeadLoop()\n  const getPreviousSquare = () => {\n    if (counter === 0) {\n      return document.getElementById('31');\n    } else {\n      return document.getElementById(`${counter - 1}`);\n    }\n  };\n\n  // animates playhead based off the counter position\n  const playHeadLoop = () => {\n    //get the square to animate\n    let squareToAnimate = document.getElementById(`${counter}`);\n    //find previousSquare\n    let previousSquare = getPreviousSquare();\n    //TODO Re-factor into one toggle\n    previousSquare.classList.remove('playhead');\n    previousSquare.classList.add('inactive');\n    squareToAnimate.classList.remove('inactive');\n    squareToAnimate.classList.add('playhead');\n  };\n\n  //when player is stopped reset playhead and array to initial values\n  const resetSquares = () => {\n    setCounter(0);\n    setPlayHeadArray(\n      squares.map((square, i) => (\n        <td\n          key={i + squares}\n          id={i}\n          className={square > 0 ? 'playhead' : 'inactive cycle'}\n        ></td>\n      ))\n    );\n  };\n\n  //handles any changes user makes to instrument grid and updates values accordingly\n  const updateGrid = (row, column, toggle,color) => {\n    const clonedObj = { ...grid[row] };\n    clonedObj[column] = toggle;\n    //temporary const for setGrid\n    const arrayToPassSetGrid = [];\n    for (let i = 0; i < 16; i++) {\n      if (row === i) {\n        arrayToPassSetGrid.push(clonedObj);\n      } else {\n        arrayToPassSetGrid.push(grid[i]);\n      }\n    }\n\n    arr1[row].splice(column,1,color)\n    setGrid(arrayToPassSetGrid);\n\n\n  };\n\n  //play an individual sound from our array from PlaySounds()\n  const playSound = (source) => {\n    var sound = new Howl({\n      src: [source],\n      html5: true,\n      volume: volNum / 100,\n    });\n    sound.play();\n  };\n\n  //Iterate through the array of collected sounds compiled from our grid in loop()\n  const playSounds = (array) => {\n    for (let i = 0; i < array.length; i++) {\n      playSound(array[i]);\n    }\n  };\n\n  //collate all active sound samples on the current beat into an array from instruments\n  const loop = () => {\n    //create an array to hold our sounds for a beat\n    let soundArr = [];\n    //loop through each instrument in our column\n    for (let j = 0; j < 16; j++) {\n      //if the square is active e.g. 0,0\n      if (grid[j][counter]) {\n        //set a temporary variable to hold our soundSrc\n        let soundSrc =\n          instruments[j].name === 'Bassline'\n          //e.g. \"./BassSamples/D-BassNote.wav\"\n            ? getBassNote(counter)\n            : instruments[j].sound;\n            //e.g. \"./DrumSamples/ClosedHats/HiHat01.wav\"\n        soundArr.push(soundSrc);\n      }\n      playSounds(soundArr);\n    }\n  };\n\n  //useEffect re-renders and runs our beat machine functions if IsPlaying per tick of setInterval\n  useEffect(() => {\n    //is the beat machine playing?\n    if (isPlaying) {\n      //set an interval to perform player logic\n      const interval = setInterval(() => {\n        //animate the playHead based on counter position\n        playHeadLoop();\n        // create an array of up to 6 sounds that are then played at the same time\n        loop();\n        // increments counter based on current tempo\n        if (counter < 31) {\n          setCounter((prevState) => ++prevState);\n        } else {\n          setCounter(0);\n        }\n      }, beats);\n      return () => clearInterval(interval);\n    }\n    resetSquares();\n  }, [isPlaying, beats, volNum, counter]);\n \n\n  //Map each instrumentRow onto the beat machine\n  const instrumentRows = instruments.map((instrument, row ) => {\n    return (\n      <InstrumentRow\n      \n        key={row}\n        row={row}\n        updateGrid={(row, column, toggle,color) => updateGrid(row, column, toggle,color)}\n        instrumentName={instrument.name}\n        instrumentSound={instrument.sound}\n        pattern={instrument.pattern}\n        instrumentColor={selectedColor}\n      />\n    );\n  });\n  \n\n  //Conditionally Render Playhead if isPlaying\n  const playHead = () => {\n    if (isPlaying) {\n      return (\n        <>\n          <td className=\"instrument\" />\n          {playHeadArray}\n        </>\n      );\n    } else {\n      return (\n        <>\n          <td className={isPlaying ? 'hidden' : 'instrument'} />\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n          <td className=\"inactive\"></td>\n        </>\n      );\n    }\n\n\n\n  };\n  const handleClick = () => {\n    console.log(arr1)\n    alert('Creating NFT!')\n  \n\n  }\n  \n\n\n\n\n  //store playHeadComponent in a variable for readability\n  const playHeadComponent = playHead();\n\n  //App returns the composite of our beat machine and components\n  return (\n    <Fragment>\n    <div className=\"container\">\n      <div className=\"titleImg\">\n        <BeatMachine />\n \n      </div>\n      <div className=\"btnGroup\">\n        <PlayButton onClick={togglePlay} isPlaying={isPlaying} />\n        <StopButton onClick={togglePlay} isPlaying={isPlaying} />\n      </div>\n      <br />\n      <div className=\"volTempo\">\n        <div className=\"volStyle\">\n          <Volume volNum={volNum} onChange={handleVol} />\n        </div>\n        <div className=\"tempoStyle\">\n          <Tempo\n            value={tempo}\n            onTempoChange={(event) => {\n              handleTempoChange(event);\n            }}\n          />\n        </div>\n        <div id=\"a\">\n    \n      {hideDrawingPanel}\n{/* <SwatchesPicker color={selectedColor} onChangeComplete={changeColor} />  */}\n<ColorPicker  color={selectedColor} onChangeComplete={changeColor} onSetColor={setColor} />\n      <div className={classes.colorSwatchContainer}>\n        {colorSwatch.map((color) => (\n          <div\n            key={color}\n            onClick={() => setColor(color)}\n            className={classes.colorSwatch}\n            style={{ background: color }}\n          />\n        ))}\n      </div>\n</div></div>\n      <br />\n      <table border=\"0\">\n        <tbody className=\"table\">\n          {playHeadComponent}\n          {instrumentRows}\n         \n        </tbody>\n      </table>\n    \n    <div>\n    <Button\n    style={{ background: \"ffffff\", padding: '27px' }}\n    \n    onClick={() =>{ handleClick();}}>Create\n      </Button>\n    </div>\n\n    </div>\n    </Fragment>\n  );\n\n\n  \n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}